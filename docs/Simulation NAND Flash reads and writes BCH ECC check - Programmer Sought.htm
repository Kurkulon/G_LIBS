<!DOCTYPE html>
<html>
<head>
<meta name="referrer" content="no-referrer" />

<script type="text/javascript" async="true">
(function() {
  var host = 'www.themoneytizer.com';
  var element = document.createElement('script');
  var firstScript = document.getElementsByTagName('script')[0];
  var url = 'https://cmp.quantcast.com'
    .concat('/choice/', '6Fv0cGNfc_bw8', '/', host, '/choice.js');
  var uspTries = 0;
  var uspTriesLimit = 3;
  element.async = true;
  element.type = 'text/javascript';
  element.src = url;

  firstScript.parentNode.insertBefore(element, firstScript);

  function makeStub() {
    var TCF_LOCATOR_NAME = '__tcfapiLocator';
    var queue = [];
    var win = window;
    var cmpFrame;

    function addFrame() {
      var doc = win.document;
      var otherCMP = !!(win.frames[TCF_LOCATOR_NAME]);

      if (!otherCMP) {
        if (doc.body) {
          var iframe = doc.createElement('iframe');

          iframe.style.cssText = 'display:none';
          iframe.name = TCF_LOCATOR_NAME;
          doc.body.appendChild(iframe);
        } else {
          setTimeout(addFrame, 5);
        }
      }
      return !otherCMP;
    }

    function tcfAPIHandler() {
      var gdprApplies;
      var args = arguments;

      if (!args.length) {
        return queue;
      } else if (args[0] === 'setGdprApplies') {
        if (
          args.length > 3 &&
          args[2] === 2 &&
          typeof args[3] === 'boolean'
        ) {
          gdprApplies = args[3];
          if (typeof args[2] === 'function') {
            args[2]('set', true);
          }
        }
      } else if (args[0] === 'ping') {
        var retr = {
          gdprApplies: gdprApplies,
          cmpLoaded: false,
          cmpStatus: 'stub'
        };

        if (typeof args[2] === 'function') {
          args[2](retr);
        }
      } else {
        if(args[0] === 'init' && typeof args[3] === 'object') {
          args[3] = { ...args[3], tag_version: 'V2' };
        }
        queue.push(args);
      }
    }

    function postMessageEventHandler(event) {
      var msgIsString = typeof event.data === 'string';
      var json = {};

      try {
        if (msgIsString) {
          json = JSON.parse(event.data);
        } else {
          json = event.data;
        }
      } catch (ignore) {}

      var payload = json.__tcfapiCall;

      if (payload) {
        window.__tcfapi(
          payload.command,
          payload.version,
          function(retValue, success) {
            var returnMsg = {
              __tcfapiReturn: {
                returnValue: retValue,
                success: success,
                callId: payload.callId
              }
            };
            if (msgIsString) {
              returnMsg = JSON.stringify(returnMsg);
            }
            if (event && event.source && event.source.postMessage) {
              event.source.postMessage(returnMsg, '*');
            }
          },
          payload.parameter
        );
      }
    }

    while (win) {
      try {
        if (win.frames[TCF_LOCATOR_NAME]) {
          cmpFrame = win;
          break;
        }
      } catch (ignore) {}

      if (win === window.top) {
        break;
      }
      win = win.parent;
    }
    if (!cmpFrame) {
      addFrame();
      win.__tcfapi = tcfAPIHandler;
      win.addEventListener('message', postMessageEventHandler, false);
    }
  };

  makeStub();

  var uspStubFunction = function() {
    var arg = arguments;
    if (typeof window.__uspapi !== uspStubFunction) {
      setTimeout(function() {
        if (typeof window.__uspapi !== 'undefined') {
          window.__uspapi.apply(window.__uspapi, arg);
        }
      }, 500);
    }
  };

  var checkIfUspIsReady = function() {
    uspTries++;
    if (window.__uspapi === uspStubFunction && uspTries < uspTriesLimit) {
      console.warn('USP is not accessible');
    } else {
      clearInterval(uspInterval);
    }
  };

  if (typeof window.__uspapi === 'undefined') {
    window.__uspapi = uspStubFunction;
    var uspInterval = setInterval(checkIfUspIsReady, 6000);
  }
})();
</script>

<meta charset="utf-8">
<meta name="keywords" content="Simulation NAND Flash reads and writes BCH ECC check, Programmer Sought" />
<meta name="description" content="Simulation NAND Flash reads and writes BCH ECC check, Programmer Sought, the best programmer technical posts sharing site." />
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title>Simulation NAND Flash reads and writes BCH ECC check - Programmer Sought</title>
<link href="/assets/css/css.css" rel="stylesheet" type="text/css">
<link href="/assets/css/font-awesome.min.css" rel="stylesheet" />
<link rel="stylesheet" href="/assets/css/style.css">
<link rel="stylesheet" href="/assets/css/markdown.css">
<link rel="stylesheet" href="/assets/css/viewer.min.css">
<script async src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"></script>
<script>
  window.googletag = window.googletag || {cmd: []};
        googletag.cmd.push(function() {
          var interstitialSlot = googletag.defineOutOfPageSlot('/147246189,22316101559/programmersought.com_interstitial', googletag.enums.OutOfPageFormat.INTERSTITIAL);
          if (interstitialSlot) interstitialSlot.addService(googletag.pubads());
          googletag.pubads().enableSingleRequest();
          googletag.enableServices();
          googletag.display(interstitialSlot);
      });
</script>
<script src="https://cdn.jsdelivr.net/npm/in-view@0.6.1/dist/in-view.min.js"></script>
<script>inView.offset(-200);</script>
</head>
<body>
<nav>
<div class="container">
<div class="website-logo"><h2 style="margin-top:5px;"><span style="color:white;font-weight: bold;">Programmer</span><span style="color:#F4785E;font-weight: bold;display: inline-block;">Sought</span></h2></div>
<div id="menu">
<ul class="toplinks">
<li><a href="http://www.programmersought.com" rel="nofollow" target="_blank">Home</a></li>
<li><a href="/cdn-cgi/l/email-protection#a3d3d1ccc4d1c2cecec6d1d0ccd6c4cbd7e3c4cedb8dc0ccce" rel="nofollow" target="_blank">Contact Us</a></li>
<li><a href="https://programmersought.com/privacy-policy.html" rel="nofollow" target="_blank">Privacy Policy</a></li>
</ul>
</div>
<a id="menu-toggle" href="#" class=" ">&#9776;</a> </div>
</nav>
<header style="padding:0px;">
<div class="container" style="float:left;">
<form id="searchForm" action="/search" method="post" onsubmit="return validate();">
<div>
<input type="text" name="s" id="s" value style="width:300px;" />
<input type="hidden" id="curPage" name="curPage" value />
<input type="submit" value="search" style="color:black;width:80px;" />
</div>
</form>
</div>
<div style="clear:both;"></div>
</header>
<div id="topads" style="text-align:center;padding-top:10px;">
<iframe id="programmersought_com_980x300_4_DFP_lazy" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" width="1" height="1"></iframe>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>
    inView('#programmersought_com_980x300_4_DFP_lazy').once('enter', (function () {
        (function () {
            var size = '970x250|300x250',
                iframeID = 'programmersought_com_980x300_4_DFP_lazy',
                adunit = 'programmersought.com_980x300_4_DFP',
                childNetworkId = '22316101559',
                xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    var iframe = document.getElementById(iframeID).contentWindow.document;
                    iframe.open();
                    iframe.write(xmlhttp.responseText);
                    iframe.close();
                }
            };
            var child = childNetworkId.trim()?','+childNetworkId.trim():'';
            xmlhttp.open("GET", 'https://pubads.g.doubleclick.net/gampad/adx?iu=/147246189' + child + '/' + adunit + '&sz=' + encodeURI(size) + '&t=Placement_type%3Dserving&' + Date.now(), true);
            xmlhttp.send();
        })();
    }));
</script>
</div>
<section>
<div class="container" style="min-height: 600px;">
<div class="docs-content">
<h3 style="line-height: 30px;word-break: break-all;">
<span>Simulation NAND Flash reads and writes BCH ECC check</span>
</h3>
<p style="margin-bottom:5px;word-break: break-all;">tags:&nbsp;<a href="/tag/BCH/" title="BCH">BCH</a>&nbsp;&nbsp;<a href="/tag/nand+bch/" title="nand bch">nand bch</a>&nbsp;&nbsp;<a href="/tag/Longxin+platform+NAND/" title="Longxin platform NAND">Longxin platform NAND</a>&nbsp;&nbsp;</p><div style="clear:both;"></div>
<div id="rightads0" style="padding-top:5px;padding-bottom:5px;">
<iframe id="programmersought_com_750x200_5_DFP_lazy" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" width="1" height="1"></iframe>
<script>
    inView('#programmersought_com_750x200_5_DFP_lazy').once('enter', (function () {
        (function () {
            var size = '728x90|300x250',
                iframeID = 'programmersought_com_750x200_5_DFP_lazy',
                adunit = 'programmersought.com_750x200_5_DFP',
                childNetworkId = '22316101559',
                xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    var iframe = document.getElementById(iframeID).contentWindow.document;
                    iframe.open();
                    iframe.write(xmlhttp.responseText);
                    iframe.close();
                }
            };
            var child = childNetworkId.trim()?','+childNetworkId.trim():'';
            xmlhttp.open("GET", 'https://pubads.g.doubleclick.net/gampad/adx?iu=/147246189' + child + '/' + adunit + '&sz=' + encodeURI(size) + '&t=Placement_type%3Dserving&' + Date.now(), true);
            xmlhttp.send();
        })();
    }));
</script>
</div>
<div style="padding:5px 5px 5px 5px;word-wrap: break-word; word-break: normal;max-width: 850px;" id="article_content">
<div id="vdoai">
<div id="vdo_ai_div"></div><script>(function(v,d,o,ai){ai=d.createElement('script');ai.defer=true;ai.async=true;ai.src=v.location.protocol+o;d.head.appendChild(ai);})(window, document, '//a.vdo.ai/core/v-programmersought/vdo.ai.js');</script></div>
<div class="markdown_views prism-atom-one-dark">
<h2>Simulation NAND Flash reads and writes BCH ECC check</h2>
<p>Separate the BCH checkbox in the kernel source code, so that the original data and BCH check code can be manually modified to achieve an emulated error correction process.</p>
<p>Source code BCH.C, BCH.H, Types.h</p>
<p><strong>1、bch.c</strong></p>
<pre><code class="prism language-c"><span class="token comment">/*
 * Generic binary BCH encoding/decoding library
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Copyright &copy; 2011 Parrot S.A.
 *
 * Author: Ivan Djelic &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b6dfc0d7d898d2dcd3dadfd5f6c6d7c4c4d9c298d5d9db">[email&#160;protected]</a>&gt;
 *
 * Description:
 *
 * This library provides runtime configurable encoding/decoding of binary
 * Bose-Chaudhuri-Hocquenghem (BCH) codes.
 *
 * Call init_bch to get a pointer to a newly allocated bch_control structure for
 * the given m (Galois field order), t (error correction capability) and
 * (optional) primitive polynomial parameters.
 *
 * Call encode_bch to compute and store ecc parity bytes to a given buffer.
 * Call decode_bch to detect and locate errors in received data.
 *
 * On systems supporting hw BCH features, intermediate results may be provided
 * to decode_bch in order to skip certain steps. See decode_bch() documentation
 * for details.
 *
 * Option CONFIG_BCH_CONST_PARAMS can be used to force fixed values of
 * parameters m and t; thus allowing extra compiler optimizations and providing
 * better (up to 2x) encoding performance. Using this option makes sense when
 * (m,t) are fixed and known in advance, e.g. when using BCH error correction
 * on a particular NAND flash device.
 *
 * Algorithmic details:
 *
 * Encoding is performed by processing 32 input bits in parallel, using 4
 * remainder lookup tables.
 *
 * The final stage of decoding involves the following internal steps:
 * a. Syndrome computation
 * b. Error locator polynomial computation using Berlekamp-Massey algorithm
 * c. Error locator root finding (by far the most expensive step)
 *
 * In this implementation, step c is not performed using the usual Chien search.
 * Instead, an alternative approach described in [1] is used. It consists in
 * factoring the error locator polynomial using the Berlekamp Trace algorithm
 * (BTA) down to a certain degree (4), after which ad hoc low-degree polynomial
 * solving techniques [2] are used. The resulting algorithm, called BTZ, yields
 * much better performance than Chien search for usual (m,t) values (typically
 * m &gt;= 13, t &lt; 32, see [1]).
 *
 * [1] B. Biswas, V. Herbert. Efficient root finding of polynomials over fields
 * of characteristic 2, in: Western European Workshop on Research in Cryptology
 * - WEWoRC 2009, Graz, Austria, LNCS, Springer, July 2009, to appear.
 * [2] [Zin96] V.A. Zinoviev. On the solution of equations of degree 10 over
 * finite fields GF(2^q). In Rapport de recherche INRIA no 2829, 1996.
 */</span>
<span class="token macro property">#<span class="token directive keyword">if</span> 0</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/errno.h&gt;</span></span>
<span class="token comment">//#include &lt;linux/init.h&gt;</span>
<span class="token comment">//#include &lt;linux/module.h&gt;</span>
<span class="token comment">//#include &lt;linux/slab.h&gt;</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/bitops.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;byteorder.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/bch.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;include/stdio.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/errno.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;endian.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/mtd/errno.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/compat.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&quot;bch.h&quot;</span></span>


<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fls</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xffff0000u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		x <span class="token operator">&lt;&lt;=</span> <span class="token number">16</span><span class="token punctuation">;</span>
		r <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xff000000u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		x <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
		r <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xf0000000u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		x <span class="token operator">&lt;&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>
		r <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xc0000000u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		x <span class="token operator">&lt;&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		r <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0x80000000u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		x <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		r <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token macro property">#<span class="token directive keyword">define</span> ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))</span>

<span class="token macro property">#<span class="token directive keyword">if</span> defined(CONFIG_BCH_CONST_PARAMS)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_M(_p)               (CONFIG_BCH_CONST_M)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_T(_p)               (CONFIG_BCH_CONST_T)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_N(_p)               ((1 &lt;&lt; (CONFIG_BCH_CONST_M))-1)</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_M(_p)               ((_p)-&gt;m)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_T(_p)               ((_p)-&gt;t)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_N(_p)               ((_p)-&gt;n)</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> BCH_ECC_WORDS(_p)      DIV_ROUND_UP(GF_M(_p)*GF_T(_p), 32)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> BCH_ECC_BYTES(_p)      DIV_ROUND_UP(GF_M(_p)*GF_T(_p), 8)</span>

<span class="token macro property">#<span class="token directive keyword">ifndef</span> dbg</span>
<span class="token macro property">#<span class="token directive keyword">define</span> dbg(_fmt, args...)     do {} while (0)</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token comment">/*
 * represent a polynomial over GF(2^m)
 */</span>
<span class="token keyword">struct</span> gf_poly <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> deg<span class="token punctuation">;</span>    <span class="token comment">/* polynomial degree */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">/* polynomial terms */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* given its degree, compute a polynomial size in bytes */</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GF_POLY_SZ(_d) (sizeof(struct gf_poly)+((_d)+1)*sizeof(unsigned int))</span>

<span class="token comment">/* polynomial of degree 1 */</span>
<span class="token keyword">struct</span> gf_poly_deg1 <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">struct</span> gf_poly poly<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>   c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/*
 * same as encode_bch(), but process input data one byte at a time
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encode_bch_unaligned</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span>
				 <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>
				 uint32_t <span class="token operator">*</span>ecc<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">const</span> uint32_t <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">BCH_ECC_WORDS</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		p <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>mod8_tab <span class="token operator">+</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">*</span>data<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
			ecc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		ecc<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * convert ecc bytes to aligned, zero-padded 32-bit ecc words
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">load_ecc8</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> uint32_t <span class="token operator">*</span>dst<span class="token punctuation">,</span>
		      <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	uint8_t pad<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> nwords <span class="token operator">=</span> <span class="token function">BCH_ECC_WORDS</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nwords<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> src <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
		dst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>src<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">memcpy</span><span class="token punctuation">(</span>pad<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token function">BCH_ECC_BYTES</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>nwords<span class="token punctuation">)</span><span class="token punctuation">;</span>
	dst<span class="token punctuation">[</span>nwords<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pad<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>pad<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>pad<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>pad<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * convert 32-bit ecc words to ecc bytes
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">store_ecc8</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> uint8_t <span class="token operator">*</span>dst<span class="token punctuation">,</span>
		       <span class="token keyword">const</span> uint32_t <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	uint8_t pad<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> nwords <span class="token operator">=</span> <span class="token function">BCH_ECC_WORDS</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nwords<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span>  <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	pad<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>nwords<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pad<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>nwords<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
	pad<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>nwords<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
	pad<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>nwords<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span>  <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> pad<span class="token punctuation">,</span> <span class="token function">BCH_ECC_BYTES</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>nwords<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * encode_bch - calculate BCH ecc parity of data
 * @bch:   BCH control structure
 * @data:  data to encode
 * @len:   data length in bytes
 * @ecc:   ecc parity data, must be initialized by caller
 *
 * The @ecc parity array is used both as input and output parameter, in order to
 * allow incremental computations. It should be of the size indicated by member
 * @ecc_bytes of @bch, and should be initialized to 0 before the first call.
 *
 * The exact number of computed ecc parity bits is given by member @ecc_bits of
 * @bch; it may be less than m*t for large values of t.
 */</span>
<span class="token macro property">#<span class="token directive keyword">if</span> 0</span>
<span class="token keyword">static</span> __inline__  <span class="token function">___arch__swab32</span><span class="token punctuation">(</span>uint32_t x<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token function">__asm__</span><span class="token punctuation">(</span>
	<span class="token string">&quot;	wsbh	%0, %1			\n&quot;</span>
	<span class="token string">&quot;	rotr	%0, %0, 16		\n&quot;</span>
	<span class="token punctuation">:</span> <span class="token string">&quot;=r&quot;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	<span class="token punctuation">:</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">define</span> cpu_to_be32(x) ___arch__swab32(x)</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> cpu_to_be32(x)  x</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token keyword">void</span> <span class="token function">encode_bch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> uint8_t <span class="token operator">*</span>ecc<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">BCH_ECC_WORDS</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> mlen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> m<span class="token punctuation">;</span>
	uint32_t w<span class="token punctuation">,</span> r<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> uint32_t <span class="token operator">*</span> <span class="token keyword">const</span> tab0 <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>mod8_tab<span class="token punctuation">;</span>
	<span class="token keyword">const</span> uint32_t <span class="token operator">*</span> <span class="token keyword">const</span> tab1 <span class="token operator">=</span> tab0 <span class="token operator">+</span> <span class="token number">256</span><span class="token operator">*</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> uint32_t <span class="token operator">*</span> <span class="token keyword">const</span> tab2 <span class="token operator">=</span> tab1 <span class="token operator">+</span> <span class="token number">256</span><span class="token operator">*</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> uint32_t <span class="token operator">*</span> <span class="token keyword">const</span> tab3 <span class="token operator">=</span> tab2 <span class="token operator">+</span> <span class="token number">256</span><span class="token operator">*</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> uint32_t <span class="token operator">*</span>pdata<span class="token punctuation">,</span> <span class="token operator">*</span>p0<span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">,</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ecc<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* load ecc parity bytes into internal 32-bit buffer */</span>
		<span class="token function">load_ecc8</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">,</span> ecc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		<span class="token function">memset</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
  

	<span class="token comment">/* process first unaligned data bytes */</span>
	m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		mlen <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> len <span class="token punctuation">:</span> <span class="token number">4</span><span class="token operator">-</span>m<span class="token punctuation">;</span>
		<span class="token function">encode_bch_unaligned</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> data<span class="token punctuation">,</span> mlen<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		data <span class="token operator">+</span><span class="token operator">=</span> mlen<span class="token punctuation">;</span>
		len  <span class="token operator">-</span><span class="token operator">=</span> mlen<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/* process 32-bit aligned data words */</span>
	pdata <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span>
	mlen  <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>
	data <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span>mlen<span class="token punctuation">;</span>
	len  <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span>mlen<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
	<span class="token comment">/*
	 * split each 32-bit word into 4 polynomials of weight 8 as follows:
	 *
	 * 31 ...24  23 ...16  15 ... 8  7 ... 0
	 * xxxxxxxx  yyyyyyyy  zzzzzzzz  tttttttt
	 *                               tttttttt  mod g = r0 (precomputed)
	 *                     zzzzzzzz  00000000  mod g = r1 (precomputed)
	 *           yyyyyyyy  00000000  00000000  mod g = r2 (precomputed)
	 * xxxxxxxx  00000000  00000000  00000000  mod g = r3 (precomputed)
	 * xxxxxxxx  yyyyyyyy  zzzzzzzz  tttttttt  mod g = r0^r1^r2^r3
	 */</span>
  
	<span class="token keyword">while</span> <span class="token punctuation">(</span>mlen<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* input data is read in big-endian format */</span>
		w <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token function">cpu_to_be32</span><span class="token punctuation">(</span><span class="token operator">*</span>pdata<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		p0 <span class="token operator">=</span> tab0 <span class="token operator">+</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>w <span class="token operator">&gt;&gt;</span>  <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		p1 <span class="token operator">=</span> tab1 <span class="token operator">+</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>w <span class="token operator">&gt;&gt;</span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		p2 <span class="token operator">=</span> tab2 <span class="token operator">+</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>w <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		p3 <span class="token operator">=</span> tab3 <span class="token operator">+</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>w <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
			r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>p0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>p2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>p3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			
		r<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> p0<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">^</span>p1<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">^</span>p2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">^</span>p3<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token punctuation">}</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  
	<span class="token comment">/* process last unaligned bytes */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">)</span>
		<span class="token function">encode_bch_unaligned</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* store ecc parity bytes into original parity buffer */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ecc<span class="token punctuation">)</span>
		<span class="token function">store_ecc8</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> ecc<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//EXPORT_SYMBOL_GPL(encode_bch);</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">modulo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		v <span class="token operator">-</span><span class="token operator">=</span> n<span class="token punctuation">;</span>
		v <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * shorter and faster modulo function, only works when v &lt; 2N.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mod_s</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token punctuation">:</span> v<span class="token operator">-</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">deg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> poly<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token comment">/* polynomial degree is the most-significant bit index */</span>
	<span class="token keyword">return</span> <span class="token function">fls</span><span class="token punctuation">(</span>poly<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">parity</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token comment">/*
	 * public domain code snippet, lifted from
	 * http://www-graphics.stanford.edu/~seander/bithacks.html
	 */</span>
	x <span class="token operator">^</span><span class="token operator">=</span> x <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
	x <span class="token operator">^</span><span class="token operator">=</span> x <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
	x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0x11111111U</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x11111111U</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Galois field basic operations: multiply, divide, inverse, etc. */</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>
				  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>
					       bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">gf_sqr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> a <span class="token operator">?</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">gf_div</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>
				  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> a <span class="token operator">?</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>
					<span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">gf_inv</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">a_pow</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">modulo</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">a_log</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">a_ilog</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">return</span> <span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute 2t syndromes of ecc polynomial, i.e. ecc(a^j) for j=1..2t
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compute_syndromes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> uint32_t <span class="token operator">*</span>ecc<span class="token punctuation">,</span>
			      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>syn<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> s<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>
	uint32_t poly<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">GF_T</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>

	s <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>ecc_bits<span class="token punctuation">;</span>

	<span class="token comment">/* make sure extra bits in last ecc word are cleared */</span>
	m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span>
		ecc<span class="token punctuation">[</span>s<span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>syn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>t<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>syn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* compute v(a^j) for j=1 .. 2t-1 */</span>
	<span class="token keyword">do</span> <span class="token punctuation">{<!-- --></span>
		poly <span class="token operator">=</span> <span class="token operator">*</span>ecc<span class="token operator">++</span><span class="token punctuation">;</span>
		s <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>poly<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			i <span class="token operator">=</span> <span class="token function">deg</span><span class="token punctuation">(</span>poly<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
				syn<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			poly <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* v(a^(2j)) = v(a^j)^2 */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		syn<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gf_sqr</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> syn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gf_poly_copy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token function">GF_POLY_SZ</span><span class="token punctuation">(</span>src<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compute_error_locator_polynomial</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span>
					    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>syn<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">GF_T</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> l<span class="token punctuation">,</span> pd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> syn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>elp <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>elp<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>pelp <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>elp_copy <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> k<span class="token punctuation">,</span> pp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>pelp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GF_POLY_SZ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>elp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GF_POLY_SZ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	pelp<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	pelp<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	elp<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	elp<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">/* use simplified binary Berlekamp-Massey algorithm */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>elp<span class="token operator">-&gt;</span>deg <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			k <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span>pp<span class="token punctuation">;</span>
			<span class="token function">gf_poly_copy</span><span class="token punctuation">(</span>elp_copy<span class="token punctuation">,</span> elp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">/* e[i+1](X) = e[i](X)+di*dp^-1*X^2(i-p)*e[p](X) */</span>
			tmp <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token operator">-</span><span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> pelp<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>pelp<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
					l <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> pelp<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					elp<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> tmp<span class="token operator">+</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token comment">/* compute l[i+1] = max(l[i]-&gt;c[l[p]+2*(i-p]) */</span>
			tmp <span class="token operator">=</span> pelp<span class="token operator">-&gt;</span>deg<span class="token operator">+</span>k<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&gt;</span> elp<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				elp<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
				<span class="token function">gf_poly_copy</span><span class="token punctuation">(</span>pelp<span class="token punctuation">,</span> elp_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
				pd <span class="token operator">=</span> d<span class="token punctuation">;</span>
				pp <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">/* di+1 = S(2i+3)+elp[i+1].1*S(2i+2)+...+elp[i+1].lS(2i+3-l) */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			d <span class="token operator">=</span> syn<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> elp<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
				d <span class="token operator">^</span><span class="token operator">=</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> elp<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> syn<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;elp=%s\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gf_poly_str</span><span class="token punctuation">(</span>elp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>elp<span class="token operator">-&gt;</span>deg <span class="token operator">&gt;</span> t<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>elp<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * solve a m x m linear system in GF(2) with an expected number of solutions,
 * and return the number of found solutions
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">solve_linear_system</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>rows<span class="token punctuation">,</span>
			       <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>sol<span class="token punctuation">,</span> <span class="token keyword">int</span> nsol<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">,</span> mask<span class="token punctuation">;</span>
	<span class="token keyword">int</span> rem<span class="token punctuation">,</span> c<span class="token punctuation">,</span> r<span class="token punctuation">,</span> p<span class="token punctuation">,</span> k<span class="token punctuation">,</span> param<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>

	k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">;</span>

	<span class="token comment">/* Gaussian elimination */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		rem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> c<span class="token operator">-</span>k<span class="token punctuation">;</span>
		<span class="token comment">/* find suitable row for elimination */</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> p<span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> p<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
					tmp <span class="token operator">=</span> rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
					rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> rows<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
					rows<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				rem <span class="token operator">=</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rem<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* perform elimination on remaining rows */</span>
			tmp <span class="token operator">=</span> rows<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> rem<span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span>
					rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* elimination not needed, store defective row index */</span>
			param<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		mask <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* rewrite system, inserting fake parameter rows */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		p <span class="token operator">=</span> k<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token comment">/* system has no solution */</span>
				<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

			rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> param<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>
				p<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m<span class="token operator">-</span>r<span class="token punctuation">)</span> <span class="token punctuation">:</span> rows<span class="token punctuation">[</span>r<span class="token operator">-</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>nsol <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">/* unexpected number of solutions */</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> nsol<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* set parameters for p-th solution */</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>
			rows<span class="token punctuation">[</span>param<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rows<span class="token punctuation">[</span>param<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">/* compute unique solution */</span>
		tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			mask <span class="token operator">=</span> rows<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>tmp<span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">parity</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m<span class="token operator">-</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		sol<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> nsol<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * this function builds and solves a linear system for finding roots of a degree
 * 4 affine monic polynomial X^4+aX^2+bX+c over GF(2^m).
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find_affine4_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>
			      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span>
			      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> rows<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	j <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	k <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>

	<span class="token comment">/* buid linear system to solve X^4+aX^2+bX+c = 0 */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		rows<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">^</span>
			<span class="token punctuation">(</span>a <span class="token operator">?</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">^</span>
			<span class="token punctuation">(</span>b <span class="token operator">?</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		j<span class="token operator">++</span><span class="token punctuation">;</span>
		k <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/*
	 * transpose 16x16 matrix before passing it to linear solver
	 * warning: this code assumes m &lt; 16
	 */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> mask <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>mask <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>k<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>j<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> j<span class="token punctuation">)</span><span class="token operator">^</span>rows<span class="token punctuation">[</span>k<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
			rows<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
			rows<span class="token punctuation">[</span>k<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> t<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">solve_linear_system</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> roots<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute root r of a degree 1 polynomial over GF(2^m) (returned as log(1/r))
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find_poly_deg1_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>poly<span class="token punctuation">,</span>
				<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token comment">/* poly[X] = bX+c with c!=0, root=c/b */</span>
		roots<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>
				   bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute roots of a degree 2 polynomial over GF(2^m)
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find_poly_deg2_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>poly<span class="token punctuation">,</span>
				<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> l0<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> r<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>

		l0 <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		l1 <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		l2 <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">/* using z=a/bX, transform aX^2+bX+c into z^2+z+u (u=ac/b^2) */</span>
		u <span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> l0<span class="token operator">+</span>l2<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">/*
		 * let u = sum(li.a^i) i=0..m-1; then compute r = sum(li.xi):
		 * r^2+r = sum(li.(xi^2+xi)) = sum(li.(a^i+Tr(a^i).a^k)) =
		 * u + sum(li.Tr(a^i).a^k) = u+a^k.Tr(sum(li.a^i)) = u+a^k.Tr(u)
		 * i.e. r and r+1 are roots iff Tr(u)=0
		 */</span>
		r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		v <span class="token operator">=</span> u<span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			i <span class="token operator">=</span> <span class="token function">deg</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
			r <span class="token operator">^</span><span class="token operator">=</span> bch<span class="token operator">-&gt;</span>xi_tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			v <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">/* verify root */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">gf_sqr</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token operator">^</span>r<span class="token punctuation">)</span> <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* reverse z=a/bX transformation and compute log(1/r) */</span>
			roots<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">modulo</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>l1<span class="token operator">-</span>
					    bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
			roots<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">modulo</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>l1<span class="token operator">-</span>
					    bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>r<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute roots of a degree 3 polynomial over GF(2^m)
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find_poly_deg3_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>poly<span class="token punctuation">,</span>
				<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> tmp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* transform polynomial into monic X^3 + a2X^2 + b2X + c2 */</span>
		e3 <span class="token operator">=</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		c2 <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		b2 <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		a2 <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">/* (X+a2)(X^3+a2X^2+b2X+c2) = X^4+aX^2+bX+c (affine) */</span>
		c <span class="token operator">=</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/* c = a2c2      */</span>
		b <span class="token operator">=</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token operator">^</span>c2<span class="token punctuation">;</span>        <span class="token comment">/* b = a2b2 + c2 */</span>
		a <span class="token operator">=</span> <span class="token function">gf_sqr</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token operator">^</span>b2<span class="token punctuation">;</span>            <span class="token comment">/* a = a2^2 + b2 */</span>

		<span class="token comment">/* find the 4 roots of this affine polynomial */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find_affine4_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* remove a2 from final list of roots */</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a2<span class="token punctuation">)</span>
					roots<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">a_ilog</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute roots of a degree 4 polynomial over GF(2^m)
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find_poly_deg4_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>poly<span class="token punctuation">,</span>
				<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e4<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">/* transform polynomial into monic X^4 + aX^3 + bX^2 + cX + d */</span>
	e4 <span class="token operator">=</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	d <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	c <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	a <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e4<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* use Y=1/X transformation to get an affine polynomial */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* first, eliminate cX by using z=X+e with ae^2+c=0 */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* compute e such that e^2 = c/a */</span>
			f <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> c<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
			l <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
			l <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
			e <span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> l<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">/*
			 * use transformation z=X+e:
			 * z^4+e^4 + a(z^3+ez^2+e^2z+e^3) + b(z^2+e^2) +cz+ce+d
			 * z^4 + az^3 + (ae+b)z^2 + (ae^2+c)z+e^4+be^2+ae^3+ce+d
			 * z^4 + az^3 + (ae+b)z^2 + e^4+be^2+d
			 * z^4 + az^3 +     b'z^2 + d'
			 */</span>
			d <span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token operator">^</span>d<span class="token punctuation">;</span>
			b <span class="token operator">=</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token operator">^</span>b<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">/* now, use Y=1/X to get Y^4 + b/dY^2 + a/dY + 1/d */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token comment">/* assume all roots have multiplicity 1 */</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

		c2 <span class="token operator">=</span> <span class="token function">gf_inv</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
		b2 <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
		a2 <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* polynomial is already affine */</span>
		c2 <span class="token operator">=</span> d<span class="token punctuation">;</span>
		b2 <span class="token operator">=</span> c<span class="token punctuation">;</span>
		a2 <span class="token operator">=</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* find the 4 roots of this affine polynomial */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find_affine4_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> roots<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* post-process roots (reverse transformations) */</span>
			f <span class="token operator">=</span> a <span class="token operator">?</span> <span class="token function">gf_inv</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> roots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> roots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			roots<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">a_ilog</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> f<span class="token operator">^</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * build monic, log-based representation of a polynomial
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gf_poly_logrep</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span>
			   <span class="token keyword">const</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>rep<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> d <span class="token operator">=</span> a<span class="token operator">-&gt;</span>deg<span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>a<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* represent 0 values with -1; warning, rep[d] is not set to 1 */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		rep<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>l<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute polynomial Euclidean division remainder in GF(2^m)[X]
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gf_poly_mod</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>a<span class="token punctuation">,</span>
			<span class="token keyword">const</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>rep<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> la<span class="token punctuation">,</span> p<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">*</span>c <span class="token operator">=</span> a<span class="token operator">-&gt;</span>c<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> d <span class="token operator">=</span> b<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>deg <span class="token operator">&lt;</span> d<span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>

	<span class="token comment">/* reuse or compute log representation of denominator */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rep<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		rep <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">;</span>
		<span class="token function">gf_poly_logrep</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rep<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> a<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> d<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			la <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			p <span class="token operator">=</span> j<span class="token operator">-</span>d<span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				m <span class="token operator">=</span> rep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
					c<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span>
								     m<span class="token operator">+</span>la<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	a<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>a<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span>
		a<span class="token operator">-&gt;</span>deg<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute polynomial Euclidean division quotient in GF(2^m)[X]
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gf_poly_div</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>a<span class="token punctuation">,</span>
			<span class="token keyword">const</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>deg <span class="token operator">&gt;=</span> b<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		q<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> a<span class="token operator">-&gt;</span>deg<span class="token operator">-</span>b<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span>
		<span class="token comment">/* compute a mod b (modifies a) */</span>
		<span class="token function">gf_poly_mod</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">/* quotient is stored in upper part of polynomial a */</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>b<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>q<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		q<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		q<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute polynomial GCD (Greatest Common Divisor) in GF(2^m)[X]
 */</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span><span class="token function">gf_poly_gcd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>a<span class="token punctuation">,</span>
				   <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

	<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;gcd(%s,%s)=&quot;</span><span class="token punctuation">,</span> <span class="token function">gf_poly_str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">gf_poly_str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>deg <span class="token operator">&lt;</span> b<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		tmp <span class="token operator">=</span> b<span class="token punctuation">;</span>
		b <span class="token operator">=</span> a<span class="token punctuation">;</span>
		a <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token operator">-&gt;</span>deg <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token function">gf_poly_mod</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		tmp <span class="token operator">=</span> b<span class="token punctuation">;</span>
		b <span class="token operator">=</span> a<span class="token punctuation">;</span>
		a <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;%s\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gf_poly_str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * Given a polynomial f and an integer k, compute Tr(a^kX) mod f
 * This is used in Berlekamp Trace algorithm for splitting polynomials
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compute_trace_bk_mod</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span>
				 <span class="token keyword">const</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>z<span class="token punctuation">,</span>
				 <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>out<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>

	<span class="token comment">/* z contains z^2j mod f */</span>
	z<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	z<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	z<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>

	out<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GF_POLY_SZ</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* compute f log representation only once */</span>
	<span class="token function">gf_poly_logrep</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> f<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* add a^(k*2^i)(z^(2^i) mod f) and compute (z^(2^i) mod f)^2 */</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> z<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			out<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> z<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			z<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gf_sqr</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> z<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			z<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-&gt;</span>deg <span class="token operator">&gt;</span> out<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span>
			out<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> z<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			z<span class="token operator">-&gt;</span>deg <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
			<span class="token comment">/* z^(2(i+1)) mod f = (z^(2^i) mod f)^2 mod f */</span>
			<span class="token function">gf_poly_mod</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> z<span class="token punctuation">,</span> f<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>out<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> out<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span>
		out<span class="token operator">-&gt;</span>deg<span class="token operator">--</span><span class="token punctuation">;</span>

	<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;Tr(a^%d.X) mod f = %s\n&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token function">gf_poly_str</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * factor a polynomial using Berlekamp Trace algorithm (BTA)
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">factor_polynomial</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>f<span class="token punctuation">,</span>
			      <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span><span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span><span class="token operator">*</span>h<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>f2 <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>q  <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>tk <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>z  <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>gcd<span class="token punctuation">;</span>

	<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;factoring %s...\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gf_poly_str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>g <span class="token operator">=</span> f<span class="token punctuation">;</span>
	<span class="token operator">*</span>h <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">/* tk = Tr(a^k.X) mod f */</span>
	<span class="token function">compute_trace_bk_mod</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> k<span class="token punctuation">,</span> f<span class="token punctuation">,</span> z<span class="token punctuation">,</span> tk<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>tk<span class="token operator">-&gt;</span>deg <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* compute g = gcd(f, tk) (destructive operation) */</span>
		<span class="token function">gf_poly_copy</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
		gcd <span class="token operator">=</span> <span class="token function">gf_poly_gcd</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> tk<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>gcd<span class="token operator">-&gt;</span>deg <span class="token operator">&lt;</span> f<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* compute h=f/gcd(f,tk); this will modify f and q */</span>
			<span class="token function">gf_poly_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> f<span class="token punctuation">,</span> gcd<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">/* store g and h in-place (clobbering f) */</span>
			<span class="token operator">*</span>h <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> gf_poly_deg1 <span class="token operator">*</span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span>gcd<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span><span class="token punctuation">.</span>poly<span class="token punctuation">;</span>
			<span class="token function">gf_poly_copy</span><span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">,</span> gcd<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">gf_poly_copy</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * find roots of a polynomial, using BTZ algorithm; see the beginning of this
 * file for details
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find_poly_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span>
			   <span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>poly<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> cnt<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>f1<span class="token punctuation">,</span> <span class="token operator">*</span>f2<span class="token punctuation">;</span>

	<span class="token keyword">switch</span> <span class="token punctuation">(</span>poly<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* handle low degree polynomials with ad hoc techniques */</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
		cnt <span class="token operator">=</span> <span class="token function">find_poly_deg1_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token punctuation">,</span> roots<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
		cnt <span class="token operator">=</span> <span class="token function">find_poly_deg2_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token punctuation">,</span> roots<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
		cnt <span class="token operator">=</span> <span class="token function">find_poly_deg3_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token punctuation">,</span> roots<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
		cnt <span class="token operator">=</span> <span class="token function">find_poly_deg4_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> poly<span class="token punctuation">,</span> roots<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token comment">/* factor polynomial using Berlekamp Trace Algorithm (BTA) */</span>
		cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token operator">-&gt;</span>deg <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token function">factor_polynomial</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> k<span class="token punctuation">,</span> poly<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>f1<span class="token punctuation">)</span>
				cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">find_poly_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> f1<span class="token punctuation">,</span> roots<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
				cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">find_poly_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> f2<span class="token punctuation">,</span> roots<span class="token operator">+</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">if</span> defined(USE_CHIEN_SEARCH)</span>
<span class="token comment">/*
 * exhaustive root search (Chien) implementation - not used, included only for
 * reference/comparison tests
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">chien_search</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>
			<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>roots<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> m<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> syn<span class="token punctuation">,</span> syn0<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">*</span>len<span class="token operator">+</span>bch<span class="token operator">-&gt;</span>ecc_bits<span class="token punctuation">;</span>

	<span class="token comment">/* use a log-based representation of polynomial */</span>
	<span class="token function">gf_poly_logrep</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> p<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	syn0 <span class="token operator">=</span> <span class="token function">gf_div</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>deg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* compute elp(a^i) */</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> syn <span class="token operator">=</span> syn0<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> p<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			m <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
				syn <span class="token operator">^</span><span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> m<span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>syn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			roots<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> p<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> p<span class="token operator">-&gt;</span>deg<span class="token punctuation">)</span> <span class="token operator">?</span> count <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">define</span> find_poly_roots(_p, _k, _elp, _loc) chien_search(_p, len, _elp, _loc)</span>
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment">/* USE_CHIEN_SEARCH */</span>

<span class="token comment">/**
 * decode_bch - decode received codeword and find bit error locations
 * @bch:      BCH control structure
 * @data:     received data, ignored if @calc_ecc is provided
 * @len:      data length in bytes, must always be provided
 * @recv_ecc: received ecc, if NULL then assume it was XORed in @calc_ecc
 * @calc_ecc: calculated ecc, if NULL then calc_ecc is computed from @data
 * @syn:      hw computed syndrome data (if NULL, syndrome is calculated)
 * @errloc:   output array of error locations
 *
 * Returns:
 *  The number of errors found, or -EBADMSG if decoding failed, or -EINVAL if
 *  invalid parameters were provided
 *
 * Depending on the available hw BCH support and the need to compute @calc_ecc
 * separately (using encode_bch()), this function should be called with one of
 * the following parameter configurations -
 *
 * by providing @data and @recv_ecc only:
 *   decode_bch(@bch, @data, @len, @recv_ecc, NULL, NULL, @errloc)
 *
 * by providing @recv_ecc and @calc_ecc:
 *   decode_bch(@bch, NULL, @len, @recv_ecc, @calc_ecc, NULL, @errloc)
 *
 * by providing ecc = recv_ecc XOR calc_ecc:
 *   decode_bch(@bch, NULL, @len, NULL, ecc, NULL, @errloc)
 *
 * by providing syndrome results @syn:
 *   decode_bch(@bch, NULL, @len, NULL, NULL, @syn, @errloc)
 *
 * Once decode_bch() has successfully returned with a positive value, error
 * locations returned in array @errloc should be interpreted as follows -
 *
 * if (errloc[n] &gt;= 8*len), then n-th error is located in ecc (no need for
 * data correction)
 *
 * if (errloc[n] &lt; 8*len), then n-th error is located in data and can be
 * corrected with statement data[errloc[n]/8] ^= 1 &lt;&lt; (errloc[n] % 8);
 *
 * Note that this function does not perform any data correction by itself, it
 * merely indicates error locations.
 */</span>
<span class="token keyword">int</span> <span class="token function">decode_bch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>
	       <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>recv_ecc<span class="token punctuation">,</span> <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>calc_ecc<span class="token punctuation">,</span>
	       <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>syn<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>errloc<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ecc_words <span class="token operator">=</span> <span class="token function">BCH_ECC_WORDS</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> nbits<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> err<span class="token punctuation">,</span> nroots<span class="token punctuation">;</span>
	uint32_t sum<span class="token punctuation">;</span>

	<span class="token comment">/* sanity check: make sure data length can be handled */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>len <span class="token operator">&gt;</span> <span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>n<span class="token operator">-</span>bch<span class="token operator">-&gt;</span>ecc_bits<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">/* if caller does not provide syndromes, compute them */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>syn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>calc_ecc<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* compute received data ecc into an internal buffer */</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token operator">!</span>recv_ecc<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token function">encode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* load provided calculated ecc */</span>
			<span class="token function">load_ecc8</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">,</span> calc_ecc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">/* load received ecc or assume it was XORed in calc_ecc */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>recv_ecc<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token function">load_ecc8</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf2<span class="token punctuation">,</span> recv_ecc<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">/* XOR received and calculated ecc */</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ecc_words<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> bch<span class="token operator">-&gt;</span>ecc_buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				sum <span class="token operator">|</span><span class="token operator">=</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sum<span class="token punctuation">)</span>
				<span class="token comment">/* no error found */</span>
				<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">compute_syndromes</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>syn<span class="token punctuation">)</span><span class="token punctuation">;</span>
		syn <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>syn<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	err <span class="token operator">=</span> <span class="token function">compute_error_locator_polynomial</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> syn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		nroots <span class="token operator">=</span> <span class="token function">find_poly_roots</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bch<span class="token operator">-&gt;</span>elp<span class="token punctuation">,</span> errloc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> nroots<span class="token punctuation">)</span>
			err <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* post-process raw error locations for easier correction */</span>
		nbits <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>bch<span class="token operator">-&gt;</span>ecc_bits<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> err<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nbits<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				err <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nbits<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span><span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>err <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> err <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//EXPORT_SYMBOL_GPL(decode_bch);</span>

<span class="token comment">/*
 * generate Galois field lookup tables
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">build_gf_tables</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> poly<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">deg</span><span class="token punctuation">(</span>poly<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* primitive polynomial must be of degree m */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
		bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token comment">/* polynomial is not primitive (a^i=1 with 0&lt;i&lt;2^m-1) */</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		x <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> k<span class="token punctuation">)</span>
			x <span class="token operator">^</span><span class="token operator">=</span> poly<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span><span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute generator polynomial remainder tables for fast encoding
 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">build_mod8_tables</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">const</span> uint32_t <span class="token operator">*</span>g<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
	uint32_t data<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> <span class="token operator">*</span>tab<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">BCH_ECC_WORDS</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> plen <span class="token operator">=</span> <span class="token function">DIV_ROUND_UP</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>ecc_bits<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> ecclen <span class="token operator">=</span> <span class="token function">DIV_ROUND_UP</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>ecc_bits<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>mod8_tab<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">256</span><span class="token operator">*</span>l<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>mod8_tab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token comment">/* p(X)=i is a small polynomial of weight &lt;= 8 */</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* we want to compute (p(X).X^(8*b+deg(g))) mod g(X) */</span>
			tab <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>mod8_tab <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token number">256</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">*</span>l<span class="token punctuation">;</span>
			data <span class="token operator">=</span> i <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				d <span class="token operator">=</span> <span class="token function">deg</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">/* subtract X^d.g(X) from p(X).X^(8*b+deg(g)) */</span>
				data <span class="token operator">^</span><span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ecclen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
					hi <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">?</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
					lo <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> plen<span class="token punctuation">)</span> <span class="token operator">?</span>
						g<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span>d<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
					tab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> hi<span class="token operator">|</span>lo<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * build a base for factoring degree 2 polynomials
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">build_deg2_base</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> remaining<span class="token punctuation">,</span> ak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> xi<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">/* find k s.t. Tr(a^k) = 1 and 0 &lt;= k &lt; m */</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
			sum <span class="token operator">^</span><span class="token operator">=</span> <span class="token function">a_pow</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			ak <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* find xi, i=0..m-1 such that xi^2+xi = a^i+Tr(a^i).a^k */</span>
	remaining <span class="token operator">=</span> m<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>xi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>xi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> remaining<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		y <span class="token operator">=</span> <span class="token function">gf_sqr</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token operator">^</span>x<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			r <span class="token operator">=</span> <span class="token function">a_log</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>xi<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
				bch<span class="token operator">-&gt;</span>xi_tab<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
				xi<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
				remaining<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;x%d = %x\n&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			y <span class="token operator">^</span><span class="token operator">=</span> ak<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* should not happen but check anyway */</span>
	<span class="token keyword">return</span> remaining <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">bch_alloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>err<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>

	<span class="token comment">//ptr = kmalloc(size, GFP_KERNEL);</span>
	ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>err <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * compute generator polynomial for given (m,t) parameters.
 */</span>
<span class="token keyword">static</span> uint32_t <span class="token operator">*</span><span class="token function">compute_generator_polynomial</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">GF_M</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">GF_T</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> nbits<span class="token punctuation">,</span> r<span class="token punctuation">,</span> word<span class="token punctuation">,</span> <span class="token operator">*</span>roots<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>g<span class="token punctuation">;</span>
	uint32_t <span class="token operator">*</span>genpoly<span class="token punctuation">;</span>

	g <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token function">GF_POLY_SZ</span><span class="token punctuation">(</span>m<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	roots <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>roots<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	genpoly <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token function">DIV_ROUND_UP</span><span class="token punctuation">(</span>m<span class="token operator">*</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>genpoly<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token function">free</span><span class="token punctuation">(</span>genpoly<span class="token punctuation">)</span><span class="token punctuation">;</span>
		genpoly <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> finish<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/* enumerate all roots of g(X) */</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>roots <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>roots<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			roots<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			r <span class="token operator">=</span> <span class="token function">mod_s</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* build generator polynomial g(X) */</span>
	g<span class="token operator">-&gt;</span>deg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">GF_N</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>roots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token comment">/* multiply g(X) by (X+root) */</span>
			r <span class="token operator">=</span> bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>g<span class="token operator">-&gt;</span>deg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> g<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
				g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token operator">^</span>g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

			g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gf_mul</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
			g<span class="token operator">-&gt;</span>deg<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* store left-justified binary representation of g(X) */</span>
	n <span class="token operator">=</span> g<span class="token operator">-&gt;</span>deg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		nbits <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">32</span> <span class="token punctuation">:</span> n<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> word <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nbits<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>c<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
				word <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		genpoly<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token punctuation">;</span>
		n <span class="token operator">-</span><span class="token operator">=</span> nbits<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bch<span class="token operator">-&gt;</span>ecc_bits <span class="token operator">=</span> g<span class="token operator">-&gt;</span>deg<span class="token punctuation">;</span>

finish<span class="token punctuation">:</span>
	<span class="token function">free</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">free</span><span class="token punctuation">(</span>roots<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> genpoly<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * init_bch - initialize a BCH encoder/decoder
 * @m:          Galois field order, should be in the range 5-15
 * @t:          maximum error correction capability, in bits
 * @prim_poly:  user-provided primitive polynomial (or 0 to use default)
 *
 * Returns:
 *  a newly allocated BCH control structure if successful, NULL otherwise
 *
 * This initialization can take some time, as lookup tables are built for fast
 * encoding/decoding; make sure not to call this function from a time critical
 * path. Usually, init_bch() should be called on module/driver init and
 * free_bch() should be called to release memory on exit.
 *
 * You may provide your own primitive polynomial of degree @m in argument
 * @prim_poly, or let init_bch() use its default polynomial.
 *
 * Once init_bch() has successfully returned a pointer to a newly allocated
 * BCH control structure, ecc length in bytes is given by member @ecc_bytes of
 * the structure.
 */</span>
<span class="token keyword">struct</span> bch_control <span class="token operator">*</span><span class="token function">init_bch</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prim_poly<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> words<span class="token punctuation">;</span>
	uint32_t <span class="token operator">*</span>genpoly<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token keyword">int</span> min_m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> max_m <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

	<span class="token comment">/* default primitive polynomials */</span>
	<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prim_poly_tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>
		<span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x11d</span><span class="token punctuation">,</span> <span class="token number">0x211</span><span class="token punctuation">,</span> <span class="token number">0x409</span><span class="token punctuation">,</span> <span class="token number">0x805</span><span class="token punctuation">,</span> <span class="token number">0x1053</span><span class="token punctuation">,</span> <span class="token number">0x201b</span><span class="token punctuation">,</span>
		<span class="token number">0x402b</span><span class="token punctuation">,</span> <span class="token number">0x8003</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">if</span> defined(CONFIG_BCH_CONST_PARAMS)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token punctuation">(</span>CONFIG_BCH_CONST_M<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token punctuation">(</span>CONFIG_BCH_CONST_T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token function">printk</span><span class="token punctuation">(</span>KERN_ERR <span class="token string">&quot;bch encoder/decoder was configured to support &quot;</span>
		       <span class="token string">&quot;parameters m=%d, t=%d only!\n&quot;</span><span class="token punctuation">,</span>
		       CONFIG_BCH_CONST_M<span class="token punctuation">,</span> CONFIG_BCH_CONST_T<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">&lt;</span> min_m<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> max_m<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">/*
		 * values of m greater than 15 are not currently supported;
		 * supporting m &gt; 15 would require changing table base type
		 * (uint16_t) and a small patch in matrix transposition
		 */</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	<span class="token comment">/* sanity checks */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>m<span class="token operator">*</span>t <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">/* invalid t value */</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	<span class="token comment">/* select a primitive polynomial for generating GF(2^m) */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>prim_poly <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		prim_poly <span class="token operator">=</span> prim_poly_tab<span class="token punctuation">[</span>m<span class="token operator">-</span>min_m<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">//bch = kzalloc(sizeof(*bch), GFP_KERNEL);</span>
	bch <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bch <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	bch<span class="token operator">-&gt;</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	words  <span class="token operator">=</span> <span class="token function">DIV_ROUND_UP</span><span class="token punctuation">(</span>m<span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>ecc_bytes <span class="token operator">=</span> <span class="token function">DIV_ROUND_UP</span><span class="token punctuation">(</span>m<span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>a_pow_tab <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>bch<span class="token operator">-&gt;</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>a_log_tab <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>bch<span class="token operator">-&gt;</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>mod8_tab  <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span>words<span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>mod8_tab<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>ecc_buf   <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span>words<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>ecc_buf2  <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span>words<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>ecc_buf2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>xi_tab    <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>xi_tab<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>syn       <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>syn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>cache     <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bch<span class="token operator">-&gt;</span>elp       <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> gf_poly_deg1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">bch_alloc</span><span class="token punctuation">(</span><span class="token function">GF_POLY_SZ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	err <span class="token operator">=</span> <span class="token function">build_gf_tables</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> prim_poly<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	<span class="token comment">/* use generator polynomial for computing encoding tables */</span>
	genpoly <span class="token operator">=</span> <span class="token function">compute_generator_polynomial</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>genpoly <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	<span class="token function">build_mod8_tables</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> genpoly<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">free</span><span class="token punctuation">(</span>genpoly<span class="token punctuation">)</span><span class="token punctuation">;</span>

	err <span class="token operator">=</span> <span class="token function">build_deg2_base</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> fail<span class="token punctuation">;</span>

	<span class="token keyword">return</span> bch<span class="token punctuation">;</span>

fail<span class="token punctuation">:</span>
	<span class="token function">free_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//EXPORT_SYMBOL_GPL(init_bch);</span>

<span class="token comment">/**
 *  free_bch - free the BCH control structure
 *  @bch:    BCH control structure to release
 */</span>
<span class="token keyword">void</span> <span class="token function">free_bch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bch<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>a_pow_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>a_log_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>mod8_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>ecc_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>ecc_buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>xi_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>syn<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>elp<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token operator">-&gt;</span>poly_2t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">free</span><span class="token punctuation">(</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">display_info</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cont<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token operator">=</span>cont<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; 0x%02x&quot;</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">if</span> 0</span>
<span class="token macro property">#<span class="token directive keyword">define</span> BCH 40</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCSIZE 1024</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCBYTES (BCH*14+7)/8   </span><span class="token comment">//1024*8 &lt; 2^m - 1</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> BCH 4</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCSIZE 512</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCBYTES (BCH*13+7)/8   </span><span class="token comment">//1024*8 &lt; 2^m - 1</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>errloc<span class="token punctuation">;</span> 
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> code<span class="token punctuation">[</span>ECCBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> code1<span class="token punctuation">[</span>ECCBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>ECCSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf1<span class="token punctuation">[</span>ECCSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
  m <span class="token operator">=</span> <span class="token function">fls</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span>ECCSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	t <span class="token operator">=</span> <span class="token punctuation">(</span>ECCBYTES<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bch ecc: eccsize=%d eccbytes=%d m=%d t=%d \n\r&quot;</span><span class="token punctuation">,</span>ECCSIZE<span class="token punctuation">,</span>ECCBYTES<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>

  bch <span class="token operator">=</span> <span class="token function">init_bch</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>BCH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//strcpy(buf1, buf);</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf_old:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>BCH<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">encode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bch_ecc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">if</span> 1</span>
  <span class="token comment">//for(i=BCH;i&lt;BCH+5;i++)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>BCH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0xfe</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>

  <span class="token comment">//  buf[i]=0xff;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf_cha:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>BCH<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token macro property">#<span class="token directive keyword">if</span> 0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>BCH<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>BCH<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token comment">//for(i=0;i&lt;BCH;i++)</span>
  <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span>
      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bch_ecc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

	<span class="token function">memset</span><span class="token punctuation">(</span>code1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">encode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">,</span> code1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	errloc <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>errloc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  count <span class="token operator">=</span> <span class="token function">decode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">,</span> code<span class="token punctuation">,</span> code1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>errloc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;conut: %d\n\r&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;errloc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; 0x%04x&quot;</span><span class="token punctuation">,</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ECCSIZE<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
            buf<span class="token punctuation">[</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf_err:\n\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ECCSIZE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\t buf[%d]=0x%x err data is 0x%x \n\r&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
<span class="token comment">//  free_bch(bch);</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>2、bch.h</strong></p>
<pre><code class="prism language-c"><span class="token comment">/*
 * Generic binary BCH encoding/decoding library
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Copyright &copy; 2011 Parrot S.A.
 *
 * Author: Ivan Djelic &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bad3ccdbd494ded0dfd6d3d9facadbc8c8d5ce94d9d5d7">[email&#160;protected]</a>&gt;
 *
 * Description:
 *
 * This library provides runtime configurable encoding/decoding of binary
 * Bose-Chaudhuri-Hocquenghem (BCH) codes.
*/</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> _BCH_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _BCH_H</span>

<span class="token comment">//#include &lt;machine/types.h&gt;</span>
<span class="token comment">//#include &lt;linux/types.h&gt;</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&quot;types.h&quot;</span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> DIV_ROUND_UP(n,d)       (((n) + (d) - 1) / (d))</span>
<span class="token comment">/**
 * struct bch_control - BCH control structure
 * @m:          Galois field order
 * @n:          maximum codeword size in bits (= 2^m-1)
 * @t:          error correction capability in bits
 * @ecc_bits:   ecc exact size in bits, i.e. generator polynomial degree (&lt;=m*t)
 * @ecc_bytes:  ecc max size (m*t bits) in bytes
 * @a_pow_tab:  Galois field GF(2^m) exponentiation lookup table
 * @a_log_tab:  Galois field GF(2^m) log lookup table
 * @mod8_tab:   remainder generator polynomial lookup tables
 * @ecc_buf:    ecc parity words buffer
 * @ecc_buf2:   ecc parity words buffer
 * @xi_tab:     GF(2^m) base for solving degree 2 polynomial roots
 * @syn:        syndrome buffer
 * @cache:      log-based polynomial representation buffer
 * @elp:        error locator polynomial
 * @poly_2t:    temporary polynomials of degree 2t
 */</span>
<span class="token keyword">struct</span> bch_control <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>    m<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>    n<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>    t<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>    ecc_bits<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>    ecc_bytes<span class="token punctuation">;</span>
<span class="token comment">/* private: */</span>
	uint16_t       <span class="token operator">*</span>a_pow_tab<span class="token punctuation">;</span>
	uint16_t       <span class="token operator">*</span>a_log_tab<span class="token punctuation">;</span>
	uint32_t       <span class="token operator">*</span>mod8_tab<span class="token punctuation">;</span>
	uint32_t       <span class="token operator">*</span>ecc_buf<span class="token punctuation">;</span>
	uint32_t       <span class="token operator">*</span>ecc_buf2<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>   <span class="token operator">*</span>xi_tab<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>   <span class="token operator">*</span>syn<span class="token punctuation">;</span>
	<span class="token keyword">int</span>            <span class="token operator">*</span>cache<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>elp<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> gf_poly <span class="token operator">*</span>poly_2t<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> bch_control <span class="token operator">*</span><span class="token function">init_bch</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prim_poly<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">free_bch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">encode_bch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> uint8_t <span class="token operator">*</span>ecc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">decode_bch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch<span class="token punctuation">,</span> <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>
	       <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>recv_ecc<span class="token punctuation">,</span> <span class="token keyword">const</span> uint8_t <span class="token operator">*</span>calc_ecc<span class="token punctuation">,</span>
	       <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>syn<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>errloc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment">/* _BCH_H */</span>
</code></pre>
<p><strong>3、types.h</strong></p>
<pre><code class="prism language-c"><span class="token comment">/*	$OpenBSD: types.h,v 1.6 1999/01/27 04:46:06 imp Exp $	*/</span>

<span class="token comment">/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)types.h	8.3 (Berkeley) 1/5/94
 */</span>

<span class="token macro property">#<span class="token directive keyword">ifndef</span>	_MIPS_TYPES_H_</span>
<span class="token macro property">#<span class="token directive keyword">define</span>	_MIPS_TYPES_H_</span>

<span class="token comment">//#include &lt;sys/cdefs.h&gt;</span>

<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">long</span>	vm_offset_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">long</span>	vm_size_t<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span>	vaddr_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span>	paddr_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span>	vsize_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span>	psize_t<span class="token punctuation">;</span>

<span class="token comment">/*
 * Basic integral types.  Omit the typedef if
 * not possible for a machine/compiler combination.
 */</span>
<span class="token keyword">typedef</span>	__signed <span class="token keyword">char</span>		   int8_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>		 u_int8_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>		  uint8_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">short</span>			  int16_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">short</span>		u_int16_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">short</span>		 uint16_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">int</span>			  int32_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>		u_int32_t<span class="token punctuation">;</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>		 uint32_t<span class="token punctuation">;</span>
<span class="token comment">/* LONGLONG */</span>
<span class="token keyword">typedef</span>	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>	 uint64_t<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">if</span> !defined(_ANSI_SOURCE) &amp;&amp; !defined(_POSIX_SOURCE)</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> _physadr <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">*</span>physadr<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> label_t <span class="token punctuation">{<!-- --></span>
	register_t val<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> label_t<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token macro property">#<span class="token directive keyword">define</span>	__SWAP_BROKEN</span>

<span class="token macro property">#<span class="token directive keyword">endif</span>	</span><span class="token comment">/* !_MIPS_TYPES_H_ */</span>
</code></pre>
<h2>Compiler:</h2>
<p><mark>gcc bch.c</mark></p>
<h2>operation result:</h2>
<p><mark>./a.out</mark><br/> <img src="https://img-blog.csdnimg.cn/20210222174120791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rvbmd4aW4xMTAxMTI0,size_16,color_FFFFFF,t_70" alt="bch" /></p>
<h2>Remark:</h2>
<p>The simulation part of the code is as follows</p>
<pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">display_info</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cont<span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token operator">=</span>cont<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; 0x%02x&quot;</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">if</span> 0</span>
<span class="token macro property">#<span class="token directive keyword">define</span> BCH 40</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCSIZE 1024</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCBYTES (BCH*14+7)/8   </span><span class="token comment">//1024*8 &lt; 2^m - 1</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> BCH 4</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCSIZE 512</span>
<span class="token macro property">#<span class="token directive keyword">define</span> ECCBYTES (BCH*13+7)/8   </span><span class="token comment">//1024*8 &lt; 2^m - 1</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>errloc<span class="token punctuation">;</span> 
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> code<span class="token punctuation">[</span>ECCBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> code1<span class="token punctuation">[</span>ECCBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> bch_control <span class="token operator">*</span>bch <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>ECCSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf1<span class="token punctuation">[</span>ECCSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
  m <span class="token operator">=</span> <span class="token function">fls</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span>ECCSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	t <span class="token operator">=</span> <span class="token punctuation">(</span>ECCBYTES<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bch ecc: eccsize=%d eccbytes=%d m=%d t=%d \n\r&quot;</span><span class="token punctuation">,</span>ECCSIZE<span class="token punctuation">,</span>ECCBYTES<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>

  bch <span class="token operator">=</span> <span class="token function">init_bch</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>BCH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//strcpy(buf1, buf);</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf_old:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>BCH<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">encode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bch_ecc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">if</span> 1					</span><span class="token comment">/ / Modify the original data</span>
  <span class="token comment">//for(i=BCH;i&lt;BCH+5;i++)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>BCH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0xfe</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>

  <span class="token comment">//  buf[i]=0xff;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf_cha:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>BCH<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token macro property">#<span class="token directive keyword">if</span> 0					</span><span class="token comment">/ / Modify BCH Verification Code</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>BCH<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>BCH<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token comment">//for(i=0;i&lt;BCH;i++)</span>
  <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span>
      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bch_ecc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">display_info</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

	<span class="token function">memset</span><span class="token punctuation">(</span>code1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ECCBYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">encode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">,</span> code1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	errloc <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>errloc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  count <span class="token operator">=</span> <span class="token function">decode_bch</span><span class="token punctuation">(</span>bch<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> ECCSIZE<span class="token punctuation">,</span> code<span class="token punctuation">,</span> code1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>errloc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;conut: %d\n\r&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;errloc:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; 0x%04x&quot;</span><span class="token punctuation">,</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\n\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ECCSIZE<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
            buf<span class="token punctuation">[</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>errloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// Correction process</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf_err:\n\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ECCSIZE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>		<span class="token comment">/ / Judging whether the data is corrected</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\t buf[%d]=0x%x err data is 0x%x \n\r&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
<span class="token comment">//  free_bch(bch);</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div><div id="doreport" style="float:right;font-size:15px;padding-top:15px;font-weight: bold;">
<a href="/cdn-cgi/l/email-protection#2a5a58454d584b47474f5859455f4d425e6a4d47520449454715595f48404f495e1769455a5358434d425e0a6945475a464b43445e0c48454e53176b585e4349464f0a636e100a1c1e1313131319131f1e19" title="Copyright Complaint">Copyright Complaint</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="/cdn-cgi/l/email-protection#3242405d5540535f5f5740415d47555a4672555f4a1c515d5f0d414750585751460f6142535f126057425d404614505d564b0f7340465b515e57127b76081204060b0b0b0b010b070601" title="Spam Report">Spam Report</a>
</div>
<div style="clear:both;"></div>
<div id="rightads1" style="margin-top:15px;margin-bottom:10px;">
<div id="s-programmersought"></div><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(function(v,d,o,ai){ai=d.createElement('script');ai.defer=true;ai.async=true;ai.src=v.location.protocol+o;d.head.appendChild(ai);})(window, document, '//a.vdo.ai/core/s-programmersought/vdo.ai.js');</script></div>
</div>
<div style="clear:both;"></div>
<div id="rightads119" style="text-align:center;width:100%;">
<iframe id="programmersought_com_728x90_3_DFP_lazy" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" width="1" height="1"></iframe>
<script>
    inView('#programmersought_com_728x90_3_DFP_lazy').once('enter', (function () {
        (function () {
            var size = '728x90|300x250',
                iframeID = 'programmersought_com_728x90_3_DFP_lazy',
                adunit = 'programmersought.com_728x90_3_DFP',
                childNetworkId = '22316101559',
                xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    var iframe = document.getElementById(iframeID).contentWindow.document;
                    iframe.open();
                    iframe.write(xmlhttp.responseText);
                    iframe.close();
                }
            };
            var child = childNetworkId.trim()?','+childNetworkId.trim():'';
            xmlhttp.open("GET", 'https://pubads.g.doubleclick.net/gampad/adx?iu=/147246189' + child + '/' + adunit + '&sz=' + encodeURI(size) + '&t=Placement_type%3Dserving&' + Date.now(), true);
            xmlhttp.send();
        })();
    }));
</script>
</div>
<h3>Intelligent Recommendation</h3>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/94968322741/"><img style="width:172px;height:120px;" src="https://img-blog.csdnimg.cn/20210303165004737.png">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/94968322741/" rel="bookmark" title="STM32 reads and writes internal flash attention">STM32 reads and writes internal flash attention</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">STM32 reads and writes internal flash attention Let me talk about it first how to write How to read to sum up Let me talk about it first 1. The first step in writing is to unlock flash, it is best to ...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/93533351747/"><img style="width:172px;height:120px;" src="http://blog.chinaunix.net/attachment/201203/28/26404697_1332936524zvk3.jpg">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/93533351747/" rel="bookmark" title="NOR Flash and NAND Flash">NOR Flash and NAND Flash</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">NOR Flash and NAND Flash The market is now two main nonvolatile flash memory technology.Intelto1988Was first developedNOR Flash&nbsp;Technology, completely changed the originalEPROM(Electrically Progr...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/98382561184/"><img style="width:172px;height:120px;" src="https://img-blog.csdnimg.cn/20191224191026713.png">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/98382561184/" rel="bookmark" title="Synchronous and asynchronous Nand Nand Flash">Synchronous and asynchronous Nand Nand Flash</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">Synchronous and asynchronous Nand Nand Flash We Nand Flash while browsing the data sheet, you can see the following general description of synchronous and non-synchronous (asynchronous) of the points....</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/37068242261/" rel="bookmark" title="STM32 simulation IIC reads and writes 24cxx">STM32 simulation IIC reads and writes 24cxx</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">File (Iic.h): File (Iic.c): Document (24cxx.h) Document (24cxx.c)...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/37459962531/" rel="bookmark" title="STM32 simulation I2C reads and writes AT24C02">STM32 simulation I2C reads and writes AT24C02</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">First, hardware I2C problem Most people spit hardware I2C, multiple tests and verify this problem. If the i2C bus connection is performed when the transmission and reception is sent, the I2C bus will ...</p>
</div>
</div>
</div>
</div>
</div>
<div style="clear:both;"></div>
<div id="rightads2" style="width:100%;height:90px;" class="adsloading">
<div id="30785-1"><script src="//ads.themoneytizer.com/s/gen.js?type=1"></script><script src="//ads.themoneytizer.com/s/requestform.js?siteId=30785&formatId=1"></script></div>
</div>
<div id="adplus-336" style="text-align:center;padding-top:10px;">
</div>
<h3>More Recommendation</h3>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/56734260765/"><img style="width:172px;height:120px;" src="https://img-blog.csdn.net/20180620214108373">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/56734260765/" rel="bookmark" title="kernel (four) NAND 8-bit hardware ECC">kernel (four) NAND 8-bit hardware ECC</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">Inmach-smdkv210.c Add header file&lt;linux/mtd/mtd.h&gt; Add to nand_ecclayout DefinitionOOB Layout, while assigning tosmdk_nand_sets, Setdisable_ecc Property is false ModifyNAND Drivedrivers/mtd/nand...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/71406172055/"><img style="width:172px;height:120px;" src="https://img-blog.csdnimg.cn/20200531182350443.jpg">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/71406172055/" rel="bookmark" title="Learning Diary-ESP8266 reads and writes external Flash (2020.5.26)">Learning Diary-ESP8266 reads and writes external Flash (2020.5.26)</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">One, Falsh layout The demo Flash used by the previous ESP8266EX module is SPI Flash, ROM [hard disk, used to store and save data] Size: 2 MB, the package is SOP8 (208 mil). (SPI Flash is a flash stora...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/70887248295/"><img style="width:172px;height:120px;" src="https://img-blog.csdnimg.cn/2020091321464079.jpg">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/70887248295/" rel="bookmark" title="HAL library reads and writes the FLASH space inside STM32F103">HAL library reads and writes the FLASH space inside STM32F103</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">I declare here-this article is taken from here: [Code God Island] STM32F0x HAL library study notes (5) on-chip FLASH read and write operations This article development environment MCU model: STM32F103...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/37268217733/"><img style="width:172px;height:120px;" src="https://img-blog.csdnimg.cn/20210214144830900.jpg">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/37268217733/" rel="bookmark" title="STM32F103 Learn notes - SPI reads and writes Flash (four)">STM32F103 Learn notes - SPI reads and writes Flash (four)</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">This series of articles is a small-white learning note for STM32. Xiaobai first writes a note article, there is a deficiency or wrong, please understand and communicate! table of Contents 1.main funct...</p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div style="padding-top:6px;padding-bottom:6px;">
<div class="loop-wrap clearfix">
<div class="loop-thumb">
<a href="/article/45748217888/"><img style="width:172px;height:120px;" src="https://img-blog.csdnimg.cn/20210214135548315.jpg">
</a>
</div>
<header class="loop-data" style="padding:0;display:block;text-align: left;width: auto;">
<h3 style="margin-top:0px;border-bottom-style: none;padding-bottom: 0px;margin-bottom: 0px;overflow:hidden;line-height:30px;">
<a href="/article/45748217888/" rel="bookmark" title="STM32F103 learning notes - SPI reads and writes flash (3)">STM32F103 learning notes - SPI reads and writes flash (3)</a>
</h3>
</header>
<div class="mh-excerpt">
<p style="line-height:25px;">This series of articles is a small-white learning note for STM32. Xiaobai first writes a note article, there is a deficiency or wrong, please understand and communicate! table of Contents 1.Flash inst...</p>
</div>
</div>
</div>
</div>
</div>
<div id="rightads3" style="width:100%;height:90px;" class="adsloading">
<div id="30785-28"><script src="//ads.themoneytizer.com/s/gen.js?type=28"></script><script src="//ads.themoneytizer.com/s/requestform.js?siteId=30785&formatId=28"></script></div>
</div>
<div style="clear:both;"></div>
</div>
<ul class="docs-nav" id="menu-left">
<div id="lefttopads" style="width:320px;text-align:center;padding-bottom:10px;">
<iframe id="programmersought_com_300x250_1_DFP_lazy" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" width="1" height="1"></iframe>
<script>
    inView('#programmersought_com_300x250_1_DFP_lazy').once('enter', (function () {
        (function () {
            var size = '300x250',
                iframeID = 'programmersought_com_300x250_1_DFP_lazy',
                adunit = 'programmersought.com_300x250_1_DFP',
                childNetworkId = '22316101559',
                xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    var iframe = document.getElementById(iframeID).contentWindow.document;
                    iframe.open();
                    iframe.write(xmlhttp.responseText);
                    iframe.close();
                }
            };
            var child = childNetworkId.trim()?','+childNetworkId.trim():'';
            xmlhttp.open("GET", 'https://pubads.g.doubleclick.net/gampad/adx?iu=/147246189' + child + '/' + adunit + '&sz=' + encodeURI(size) + '&t=Placement_type%3Dserving&' + Date.now(), true);
            xmlhttp.send();
        })();
    }));
</script>
</div>
<li style="font-weight: bold;font-size: 20px;"><strong>Related Posts</strong></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/73894824156/" title="[Method] STM32F429IG MCU FMC calculates NAND Flash ECC check code">[Method] STM32F429IG MCU FMC calculates NAND Flash ECC check code</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/26871880938/" title="NAND FLASH ECC verification principle and implementation">NAND FLASH ECC verification principle and implementation</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/38128116533/" title="Verilog implements NAND Flash ECC checksum">Verilog implements NAND Flash ECC checksum</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/367911182331/" title="NAND Flash about ECC verification code">NAND Flash about ECC verification code</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/46349245641/" title="STM32F103_SPI reads and writes external Flash">STM32F103_SPI reads and writes external Flash</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/78119565882/" title="GD32F103 reads and writes internal flash">GD32F103 reads and writes internal flash</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/338410746823/" title="STM32 reads and writes data to Flash">STM32 reads and writes data to Flash</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/55153791121/" title="nand ECC algorithm record">nand ECC algorithm record</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/79111319568/" title="NAND FLASH">NAND FLASH</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/37603020827/" title="ECC check">ECC check</a></li>
<div style="padding-bottom:10px;"></div>
<div style="width:320px;height:250px;background-color: white;" id="leftads1" class="adsloading">
<div id="30785-2"><script src="//ads.themoneytizer.com/s/gen.js?type=2"></script><script src="//ads.themoneytizer.com/s/requestform.js?siteId=30785&formatId=2"></script></div>
</div>
<div id="adplus-300-600" style="text-align:center;padding-top:10px;padding-bottom:10px;">
</div>
<li style="font-weight: bold;font-size: 20px;"><strong>Popular Posts</strong></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/94597373240/" title="The difference between congruent (===) and equal (==) in JS">The difference between congruent (===) and equal (==) in JS</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/39616928578/" title="Matrix chain multiplication problem">Matrix chain multiplication problem</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/39897869701/" title="Write a picture format processing tool with Python">Write a picture format processing tool with Python</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/24779886582/" title="February 4, 2021 team complement">February 4, 2021 team complement</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/19614536060/" title="Luogu P1368 process (minimum notation/suffix automaton)">Luogu P1368 process (minimum notation/suffix automaton)</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/66663647051/" title="[NLP01] NLP basics-language model">[NLP01] NLP basics-language model</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/65671897347/" title="Web template engine -Mustache">Web template engine -Mustache</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/50007279534/" title="js small experiment">js small experiment</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/21488749183/" title="Docker packaging">Docker packaging</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/10992657833/" title="N - Kayaking CodeForces - 863B (greedy)">N - Kayaking CodeForces - 863B (greedy)</a></li>
<div style="padding-bottom:10px;"></div>
<div style="width:320px;height:615px;background-color: white;" id="leftads2" class="adsloading">
<div id="30785-3"><script src="//ads.themoneytizer.com/s/gen.js?type=3"></script><script src="//ads.themoneytizer.com/s/requestform.js?siteId=30785&formatId=3"></script></div>
</div>
<div id="adplus-300-250" style="text-align:center;padding-top:10px;padding-bottom:10px;">
</div>
<li style="font-weight: bold;font-size: 20px;"><strong>Recommended Posts</strong></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/415511016580/" title="Linux Sao Operation Chapter 11 RAID">Linux Sao Operation Chapter 11 RAID</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/81046897601/" title="Python automated operation and maintenance-day7-object-oriented">Python automated operation and maintenance-day7-object-oriented</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/16416212678/" title="xxl-job add log traceId">xxl-job add log traceId</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/47553837460/" title="The class class in the libs package is not accessible in the Android Module app">The class class in the libs package is not accessible in the Android Module app</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/11792822982/" title="@CacheEvict clear multiple key">@CacheEvict clear multiple key</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/9084441175/" title="(A*+SPFA seeks K-short circuit) ACM-ICPC 2018 Shenyang Division Network Preliminaries D.Made In Heaven">(A*+SPFA seeks K-short circuit) ACM-ICPC 2018 Shenyang Division Network Preliminaries D.Made In Heaven</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/58855383798/" title="js expressions and operators">js expressions and operators</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/972211585817/" title="Can't copy texts to other software under Neovim Ubuntu">Can't copy texts to other software under Neovim Ubuntu</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/31659745321/" title="JS garbage recycling mechanism">JS garbage recycling mechanism</a></li>
<li style="list-style-type: circle;color:#F4785E;word-wrap:break-word;"><a href="/article/35966516572/" title="Simple and popular design mode strategy mode">Simple and popular design mode strategy mode</a></li>
<div style="padding-bottom:10px;"></div>
<div style="width:320px;height:250px;background-color: white;" id="leftads3" class="adsloading">
<div id="30785-19"><script src="//ads.themoneytizer.com/s/gen.js?type=19"></script><script src="//ads.themoneytizer.com/s/requestform.js?siteId=30785&formatId=19"></script></div>
</div>
<div style="padding-bottom:10px;"></div>
<li style="font-weight: bold;font-size: 20px;"><strong>Related Tags</strong></li>
<a href="/tag/STM32/" title="STM32">STM32</a><a href="/tag/ECC+verification/" title="ECC verification">ECC verification</a><a href="/tag/Verilog+algorithm/" title="Verilog algorithm">Verilog algorithm</a><a href="/tag/ecc/" title="ecc">ecc</a><a href="/tag/nand/" title="nand">nand</a><a href="/tag/verilog/" title="verilog">verilog</a><a href="/tag/algorithm/" title="algorithm">algorithm</a><a href="/tag/linux/" title="linux">linux</a><a href="/tag/Operation+and+maintenance/" title="Operation and maintenance">Operation and maintenance</a><a href="/tag/stm32/" title="stm32">stm32</a><div id="leftbottomads" style="width:320px;text-align:center;padding-top:10px;padding-bottom:10px;">
<iframe id="programmersought_com_300x600_2_DFP_lazy" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" width="1" height="1"></iframe>
<script>
    inView('#programmersought_com_300x600_2_DFP_lazy').once('enter', (function () {
        (function () {
            var size = '300x600|300x250',
                iframeID = 'programmersought_com_300x600_2_DFP_lazy',
                adunit = 'programmersought.com_300x600_2_DFP',
                childNetworkId = '22316101559',
                xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    var iframe = document.getElementById(iframeID).contentWindow.document;
                    iframe.open();
                    iframe.write(xmlhttp.responseText);
                    iframe.close();
                }
            };
            var child = childNetworkId.trim()?','+childNetworkId.trim():'';
            xmlhttp.open("GET", 'https://pubads.g.doubleclick.net/gampad/adx?iu=/147246189' + child + '/' + adunit + '&sz=' + encodeURI(size) + '&t=Placement_type%3Dserving&' + Date.now(), true);
            xmlhttp.send();
        })();
    }));
</script>
</div>
</ul>
</div>
</section>
<section class="vibrant centered">
<div class="container">
<h4> Copyright&nbsp;&nbsp;<a href="/cdn-cgi/l/email-protection#b6c6c4d9d1c4d7dbdbd3c4c5d9c3d1dec2f6d1dbce98d5d9db" rel="nofollow" target="_blank">DMCA</a> &copy; 2018-2024 - All Rights Reserved - <a href="http://www.programmersought.com" style="color:white;">www.programmersought.com</a>&nbsp;&nbsp;<a href="https://programmersought.com/user-notice.html" rel="nofollow" target="_blank">User Notice</a> </h4>
</div>
</section>
<a class="totop" href="#">Top</a>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="/assets/js/jquery.min.js"></script>
<script src="/assets/js/layout.js"></script>
<script src="/assets/js/jquery.localscroll-1.2.7.js" type="text/javascript"></script>
<script src="/assets/js/jquery.scrollTo-1.4.3.1.js" type="text/javascript"></script>
<script src="/assets/js/top.js" type="text/javascript"></script>
<script src="/assets/js/md.js" type="text/javascript"></script>
<script src="/assets/js/hljs_new.js" type="text/javascript"></script>
<script>
		if($('div.markdown_views pre.prettyprint code.hljs').length > 0 ){
				$('div.markdown_views')[0].className = 'markdown_views';
		}
</script>
<script src="/assets/js/viewer.min.js"></script>
<script>
var viewer = new Viewer(document.getElementById('article_content'));
</script>
<script src="/assets/js/bottom.js"></script>

<script type="text/javascript">
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(80623051, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/80623051" style="position:absolute; left:-9999px;" alt="" /></div></noscript>

</body>
</html>
