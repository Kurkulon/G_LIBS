/*
** ADSP-BF706 linker description file generated on Jul 18, 2024 at 22:32:50.
*/
/*
** Copyright (C) 2000-2022 Analog Devices Inc., All Rights Reserved.
**
** This file is generated automatically based upon the options selected
** in the System Configuration utility. Changes to the LDF configuration
** should be made by modifying the appropriate options rather than editing
** this file. To access the System Configuration utility, double-click the
** system.svc file from a navigation view.
**
** Custom additions can be inserted within the user-modifiable sections. These
** sections are bounded by comments that start with "$VDSG". Only changes
** placed within these sections are preserved when this file is re-generated.
**
** Product      : CrossCore Embedded Studio
** Tool Version : 6.2.3.4
*/

ARCHITECTURE(ADSP-BF706)


#if !defined(NO_UTILITY_ROM)
# if !defined(__SILICON_REVISION__) || (__SILICON_REVISION__==0xffff)
#   warning \
    The Utility ROM will not be used to link this application because \
the silicon revision does not specify a specific revision number. This message \
may be suppressed by defining the LDF macro NO_UTILITY_ROM.
#   define NO_UTILITY_ROM
# endif
#endif


/* The boot-code in revision 1.0 ADSP-BF70x parts enables the instruction cache
** for improved booting performance. A consequence of cache being enabled
** during booting is that the L1 instruction cache memory cannot be used as
** SRAM for applications that disable instruction caching (instruction caching
** being enabled is the default). If your application must disable the
** instruction cache, you must also use an elfloader initialization code
** provided in CCES to disable instruction caching while booting.
**
** An initialization code is specified using the -init <dxe> elfloader switch.
** The initialization code dxe to use if booting an application that uses the
** instruction cache memory as SRAM is either of the following found in
** <cces install folder>/Blackfin/ldr/:
**
**   BF707_init_only_icache_disable_v00.dxe
**     - Only disables instruction caching.
**   BF707_init_icache_disable_v00.dxe
**     - Disables instruction caching. Also initializes CGU and L3 for
**       configurations matching the ADSP-BF707 Ez-board.
**
** Suppress the warning below by defining linker preprocessor macro
** USING_ICACHE_DISABLE_INIT_CODE.
*/
#if !defined(USING_ICACHE_DISABLE_INIT_CODE)
  #warning \
    A loader initialization code to disable instruction cache during booting is required. This message may be suppressed by defining the LDF macro USING_ICACHE_DISABLE_INIT_CODE.
#endif

#undef USE_CACHE_CODE
#undef USE_CACHE_DA
#undef USE_CACHE_DB

#ifdef USE_CACHE_C_A_B
	#define USE_CACHE_CODE
	#define USE_CACHE_DA
	#define USE_CACHE_DB
#elif defined(USE_CACHE_C_A)
	#define USE_CACHE_CODE
	#define USE_CACHE_DA
#elif defined(USE_CACHE_C_B)
	#define USE_CACHE_CODE
	#define USE_CACHE_DB
#elif defined(USE_CACHE_A_B)
	#define USE_CACHE_DA
	#define USE_CACHE_DB
#elif defined(USE_CACHE_A)
	#define USE_CACHE_DA
#elif defined(USE_CACHE_B)
	#define USE_CACHE_DB
#elif defined(USE_CACHE_C)
	#define USE_CACHE_CODE
#endif

/*
** Define a linked objects list.
*/
$OBJECTS = 

   $COMMAND_LINE_OBJECTS
//   ,crtn.doj
   ;

/*
** Define a linked library list.
*/
$LIBRARIES = 

    libcc.dlb
   ,libio.dlb
   ,libc.dlb
   ,librt.dlb
   ,libcpp.dlb
   ,libdsp.dlb
   ,libetsi.dlb
   ,libssl.dlb
   ,libdrv.dlb
   ,libldr.dlb
   ,libdyn.dlb
   ,libsmall.dlb
   ,libevent.dlb
   ,libprofile.dlb
   ,libosal_noos.dlb

   ;

/*
** List of all objects and libraries.
*/
$OBJS_LIBS = $OBJECTS, $LIBRARIES;

/*
** List of objects and libraries which prefer internal memory as
** specified by prefersMem attribute.
*/
$OBJS_LIBS_INTERNAL = 

    $OBJS_LIBS{prefersMem("internal")}

   ;

/*
** List of objects and libraries which don't have a preference for
** external memory as specified by prefersMem attribute.
*/
$OBJS_LIBS_NOT_EXTERNAL = 

    $OBJS_LIBS{!prefersMem("external")}

   ;

/*
** Determine which start label to use and its location
*/

#if !defined(START_ADDR)
#define START_ADDR  0x11A00000 /* reset address */
#endif
#if !defined(START_SYM)
  #define START_SYM start
#endif

#ifndef STACK_SIZE
#define STACK_SIZE 0x1FF0
#endif

MEMORY
{
	/*
	** Memory map.
	**
	** DMC            N/A
	** SMC block 0    0x7000_0000  0x7000_1FFF    8 KB
	** SMC block 1    0x7400_0000  0x7400_1FFF    8 KB
	** SPI Flash      0x4000_0000  0x47FF_FFFF  128 MB
	** OTP            0x3800_0000  0x3800_0FFF    4 KB
	** System MMRs    0x2000_0000  0x2FFF_FFFF  256 MB
	** Core MMRs      0x1FC0_0000  0x1FFF_FFFF    4 MB
	**
	** Data Block C   0x11B0_0000  0x11B0_1FFF    8 KB  SRAM
	** Instruction    0x11A0_C000  0x11A0_FFFF   16 KB  SRAM/CACHE
	** Instruction    0x11A0_0000  0x11A0_BFFF   48 KB  SRAM
	** Data Block B   0x1190_4000  0x1190_7FFF   16 KB  SRAM/CACHE
	** Data Block B   0x1190_0000  0x1190_3FFF   16 KB  SRAM
	** Data Block A   0x1180_4000  0x1180_7FFF   16 KB  SRAM/CACHE
	** Data Block A   0x1180_0000  0x1180_3FFF   16 KB  SRAM
	**
	** L2 SRAM        0x0800_0000  0x080F_FFFF    1 MB
	** L2 ROM         0x0401_0000  0x0407_FFFF  448 KB
	** L2 BOOT ROM    0x0400_0000  0x0400_FFFF   64 KB
	**
	*/

	/*
	** L1 memory.
	*/
	MEM_L1_DATA_C_STACK     { TYPE(RAM) START(0x11B00000) END(0x11B01FFF) WIDTH(8) }
	// MEM_L1_CODE_CACHE       { TYPE(RAM) START(0x11A0C000) END(0x11A0FFFF) WIDTH(8) }

#ifdef USE_CACHE_CODE

	#define L1_CODE_CACHE	1
	MEM_L1_CODE             { TYPE(RAM) START(0x11A00000) END(0x11A0BFFF) WIDTH(8) }

#else

	#define L1_CODE_CACHE	0
	MEM_L1_CODE             { TYPE(RAM) START(0x11A00000) END(0x11A0FFFF) WIDTH(8) }

#endif

#ifdef USE_CACHE_DB

	#define L1_DATA_CACHE_B	1
	MEM_L1_DATA_B           { TYPE(RAM) START(0x11900000) END(0x11903FFF) WIDTH(8) }

#else

	#define L1_DATA_CACHE_B	0
	MEM_L1_DATA_B           { TYPE(RAM) START(0x11900000) END(0x11907FFF) WIDTH(8) }

#endif

#ifdef USE_CACHE_DA

	#define L1_DATA_CACHE_A	1
	MEM_L1_DATA_A           { TYPE(RAM) START(0x11800000) END(0x11803FFF) WIDTH(8) }

#else

	#define L1_DATA_CACHE_A	0
	MEM_L1_DATA_A           { TYPE(RAM) START(0x11800000) END(0x11807FFF) WIDTH(8) }

#endif



	/*
	** L2 memory.
	*/
#define L2_SRAM_START	0x08000000
#define L2_SRAM_END		0x080FFFFF

	MEM_L2_SRAM             { TYPE(RAM) START(L2_SRAM_START) END(L2_SRAM_END) WIDTH(8) }
	//MEM_L2_SRAM_UNCACHED    { TYPE(RAM) START(0x080F0000) END(0x080FFFFF) WIDTH(8) }
	MEM_L2_ROM              { TYPE(ROM) START(0x04010000) END(0x0407FFFF) WIDTH(8) }
	MEM_SPI_FLASH           { TYPE(ROM) START(0x40000000) END(0x47FFFFFF) WIDTH(8) }

	/*
	** Static Memory Controller (SMC) memory.
	**
	** The SMC can be programmed to control up to two blocks of external
	** memories or memory-mapped devices. Each block is a 8K byte segment.
	*/
	//MEM_SMC_0               { TYPE(RAM) START(0x70000000) END(0x70001FFF) WIDTH(8) }
	//MEM_SMC_1               { TYPE(RAM) START(0x74000000) END(0x74001FFF) WIDTH(8) }
 
} /* MEMORY */

PROCESSOR P0
{
	OUTPUT($COMMAND_LINE_OUTPUT_FILE)
	RESOLVE(START_SYM, START_ADDR)
	KEEP(START_SYM, _main)
   
	#if !defined(NO_UTILITY_ROM)
		#include "ADSP-BF707-LDF.h"
	#endif
   
	SECTIONS
	{
		#define DEF_SECTION_QUAL /* None, rely on load-time initialization. */
		/*
		** Input sections to the L1 instruction memory.
		*/

		L1_code DEF_SECTION_QUAL
		{
			INPUT_SECTION_ALIGN(4)

			___l1_code_cache = L1_CODE_CACHE;  /* 0 - Instruction cache is not enabled, 1 - enabled */
         
			INPUT_SECTIONS( $OBJS_LIBS(L1_code cplb_code cplb noncache_code) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(program) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(program) )
			INPUT_SECTIONS( $OBJS_LIBS(program) )

		} > MEM_L1_CODE
      
		L1_data_c_stack NO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			RESERVE(stack_in_L1_data_c, stack_in_L1_data_c_length = STACK_SIZE,4)
			RESERVE_EXPAND(stack_in_L1_data_c, stack_in_L1_data_c_length, 0, 4)
			ldf_stack_space = stack_in_L1_data_c;
			ldf_stack_end = (ldf_stack_space + (STACK_SIZE - 4)) & 0xfffffffc;

		} > MEM_L1_DATA_C_STACK
      
		L1_data_b DEF_SECTION_QUAL
		{
			INPUT_SECTION_ALIGN(4)

			___l1_data_cache_b = L1_DATA_CACHE_B; /* DATA B cache is not enabled */

			INPUT_SECTIONS( $OBJS_LIBS(ctor) )   /* global C++ constructors list */
			INPUT_SECTIONS( $OBJS_LIBS(ctorl) )  /* NULL terminator for ctor     */
			INPUT_SECTIONS( $OBJS_LIBS(.gdt) )   /* C++ exceptions data          */
			INPUT_SECTIONS( $OBJS_LIBS(.gdtl) )  /* NULL terminator for .gdt     */
			INPUT_SECTIONS( $OBJS_LIBS(L1_data_b L1_data) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(data1 voldata vtbl constdata) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(data1 voldata vtbl constdata) )
			INPUT_SECTIONS( $OBJS_LIBS(data1 voldata cplb_data vtbl constdata .edt .cht .rtti) )

		} > MEM_L1_DATA_B
      
		/* Next input sections that have initialization qualifiers and are only
		** mapped to internal memory.
		*/

		L1_data_b_bsz ZERO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L1_bsz_b L1_bsz) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(bsz) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(bsz) )
			INPUT_SECTIONS( $OBJS_LIBS(bsz) )

		} > MEM_L1_DATA_B

		L1_data_b_no_init NO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L1_noinit_data_b L1_noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS(noinit_data) )

		} > MEM_L1_DATA_B
      
		L1_data_a DEF_SECTION_QUAL
		{
			INPUT_SECTION_ALIGN(4)

			___l1_data_cache_a = L1_DATA_CACHE_A; /* DATA A cache is not enabled */

			INPUT_SECTIONS( $OBJS_LIBS(L1_data_a L1_data) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(data1 voldata vtbl constdata) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(data1 voldata vtbl constdata) )
			INPUT_SECTIONS( $OBJS_LIBS(data1 voldata cplb_data vtbl constdata .edt .cht .rtti) )

		} > MEM_L1_DATA_A

		L1_data_a_bsz ZERO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L1_bsz_a L1_bsz) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(bsz) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(bsz) )
			INPUT_SECTIONS( $OBJS_LIBS(bsz) )

		} > MEM_L1_DATA_A

		L1_data_a_no_init NO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L1_noinit_data_a L1_noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS(noinit_data) )

		} > MEM_L1_DATA_A
      

		/*
		** Input sections to the L2 SRAM memory.
		*/
		/* First input the lists for C++ support that must be mapped
		** contiguously into memory.
		*/

		L2_code DEF_SECTION_QUAL
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L2_code cplb_code cplb noncache_code) )
			INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(program) )
			INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(program) )
			INPUT_SECTIONS( $OBJS_LIBS(program) )

		} > MEM_L2_SRAM

		L2_tables DEF_SECTION_QUAL
		{
			INPUT_SECTION_ALIGN(4)
			FORCE_CONTIGUITY
			INPUT_SECTIONS( $OBJS_LIBS(ctor) )   /* global C++ constructors list */
			INPUT_SECTIONS( $OBJS_LIBS(ctorl) )  /* NULL terminator for ctor     */
			INPUT_SECTIONS( $OBJS_LIBS(.gdt) )   /* C++ exceptions data          */
			INPUT_SECTIONS( $OBJS_LIBS(.gdtl) )  /* NULL terminator for .gdt     */

		} > MEM_L2_SRAM
      
		L2_data DEF_SECTION_QUAL
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L2_sram l2_sram L2_data l2_data) )
			INPUT_SECTIONS( $OBJS_LIBS(program noncache_code data1 voldata cplb_data vtbl constdata .edt .cht .rtti) )

		} > MEM_L2_SRAM

		L2_data_bsz ZERO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L2_bsz) )
			INPUT_SECTIONS( $OBJS_LIBS(bsz) )

		} > MEM_L2_SRAM
      
		L2_data_no_init NO_INIT
		{
			INPUT_SECTION_ALIGN(4)

			INPUT_SECTIONS( $OBJS_LIBS(L2_noinit_data) )
			INPUT_SECTIONS( $OBJS_LIBS(noinit_data) )

			INPUT_SECTION_ALIGN(4)

			RESERVE(heap_L2_data1, heap_L2_data1_len, 0, 4)
			
			ldf_heap_space = heap_L2_data1;
			ldf_heap_length = heap_L2_data1_len & 0xfffffffc;
			ldf_heap_end = ldf_heap_space + ldf_heap_length;
			//ldf_heap_length = ldf_heap_end - ldf_heap_space;

		} > MEM_L2_SRAM

	} /* SECTIONS */

} /* P0 */

